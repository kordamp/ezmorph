/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2006-2025 Andres Almiray.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.coveralls'
}

config {
    info {
        name          = rootProject.name
        description   = 'Simple Java library for transforming an Object to another Object'
        inceptionYear = '2006'
        tags          = ['ezmorph', 'converter', 'transformer']

        specification  { enabled = false }
    }

    docs {
        javadoc {
            enabled = true
            autoLinks {
                enabled = false
            }
        }
    }

    coverage {
        jacoco {
            toolVersion = jacocoVersion
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

profiles {
    profile('sbom') {
        activation {
            property {
                key   = 'sbom'
                value = true
            }
        }
        action {
            println 'SBOM generation is turned ON'

            gradleProjects {
                subprojects {
                    dirs(['subprojects']) {
                        cyclonedxBom {
                            includeConfigs = ['runtimeClasspath']
                            projectType = 'library'
                            outputName = "${project.name}-${project.version}-cyclonedx".toString()
                            destination = file('build/reports/cyclonedx')
                            includeLicenseText = false
                        }

                        publishing {
                            publications {
                                main(MavenPublication) {
                                    artifact classifier: 'cyclonedx', source: new File(cyclonedxBom.destination.get(), cyclonedxBom.outputName.get() + '.xml')
                                    artifact classifier: 'cyclonedx', source: new File(cyclonedxBom.destination.get(), cyclonedxBom.outputName.get() + '.json')
                                }
                            }
                        }

                        project.generatePomFileForMainPublication.dependsOn(cyclonedxBom)
                    }
                }
            }
        }
    }
}
